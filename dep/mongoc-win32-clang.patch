diff --git a/src/libbson/src/bson/bson-atomic.c b/src/libbson/src/bson/bson-atomic.c
index 0531c9fbb..ae6ac8c5b 100644
--- a/src/libbson/src/bson/bson-atomic.c
+++ b/src/libbson/src/bson/bson-atomic.c
@@ -25,13 +25,13 @@
 int32_t
 bson_atomic_int_add (volatile int32_t *p, int32_t n)
 {
-   return n + bson_atomic_int32_fetch_add (p, n, bson_memory_order_seq_cst);
+   return n + bson_atomic_int32_fetch_add ((volatile long*)p, n, bson_memory_order_seq_cst);
 }
 
 int64_t
 bson_atomic_int64_add (volatile int64_t *p, int64_t n)
 {
-   return n + bson_atomic_int64_fetch_add (p, n, bson_memory_order_seq_cst);
+   return n + bson_atomic_int64_fetch_add ((volatile long long*)p, n, bson_memory_order_seq_cst);
 }
 
 void
@@ -58,21 +58,21 @@ _lock_emul_atomic ()
 {
    int i;
    if (bson_atomic_int8_compare_exchange_weak (
-          &gEmulAtomicLock, 0, 1, bson_memory_order_acquire) == 0) {
+          (volatile char*)&gEmulAtomicLock, 0, 1, bson_memory_order_acquire) == 0) {
       /* Successfully took the spinlock */
       return;
    }
    /* Failed. Try taking ten more times, then begin sleeping. */
    for (i = 0; i < 10; ++i) {
       if (bson_atomic_int8_compare_exchange_weak (
-             &gEmulAtomicLock, 0, 1, bson_memory_order_acquire) == 0) {
+             (volatile char*)&gEmulAtomicLock, 0, 1, bson_memory_order_acquire) == 0) {
          /* Succeeded in taking the lock */
          return;
       }
    }
    /* Still don't have the lock. Spin and yield */
    while (bson_atomic_int8_compare_exchange_weak (
-             &gEmulAtomicLock, 0, 1, bson_memory_order_acquire) != 0) {
+             (volatile char*)&gEmulAtomicLock, 0, 1, bson_memory_order_acquire) != 0) {
       bson_thrd_yield ();
    }
 }
@@ -81,7 +81,7 @@ static void
 _unlock_emul_atomic ()
 {
    int64_t rv = bson_atomic_int8_exchange (
-      &gEmulAtomicLock, 0, bson_memory_order_release);
+      (volatile char*)&gEmulAtomicLock, 0, bson_memory_order_release);
    BSON_ASSERT (rv == 1 && "Released atomic lock while not holding it");
 }
 
diff --git a/src/libbson/src/bson/bson-context.c b/src/libbson/src/bson/bson-context.c
index 862a80a99..b3c403166 100644
--- a/src/libbson/src/bson/bson-context.c
+++ b/src/libbson/src/bson/bson-context.c
@@ -62,7 +62,7 @@ _bson_context_set_oid_seq32 (bson_context_t *context, /* IN */
                              bson_oid_t *oid)         /* OUT */
 {
    uint32_t seq = (uint32_t) bson_atomic_int32_fetch_add (
-      (int32_t *) &context->seq32, 1, bson_memory_order_seq_cst);
+      (volatile long *) &context->seq32, 1, bson_memory_order_seq_cst);
    seq = BSON_UINT32_TO_BE (seq);
    memcpy (&oid->bytes[BSON_OID_SEQ32_OFFSET],
            ((uint8_t *) &seq) + 1,
diff --git a/src/libmongoc/src/mongoc/mongoc-server-monitor.c b/src/libmongoc/src/mongoc/mongoc-server-monitor.c
index 69a7dc2c0..97d72695c 100644
--- a/src/libmongoc/src/mongoc/mongoc-server-monitor.c
+++ b/src/libmongoc/src/mongoc/mongoc-server-monitor.c
@@ -647,7 +647,7 @@ _update_topology_description (mongoc_server_monitor_t *server_monitor,
       _mongoc_topology_update_cluster_time (topology, hello_response);
    }
 
-   if (bson_atomic_int_fetch (&topology->scanner_state,
+   if (bson_atomic_int_fetch ((volatile long *)&topology->scanner_state,
                               bson_memory_order_relaxed) ==
        MONGOC_TOPOLOGY_SCANNER_SHUTTING_DOWN) {
       return;
diff --git a/src/libmongoc/src/mongoc/mongoc-shared.c b/src/libmongoc/src/mongoc/mongoc-shared.c
index c0fd68c46..550b7adfb 100644
--- a/src/libmongoc/src/mongoc/mongoc-shared.c
+++ b/src/libmongoc/src/mongoc/mongoc-shared.c
@@ -120,7 +120,7 @@ mongoc_shared_ptr_copy (mongoc_shared_ptr const ptr)
    mongoc_shared_ptr ret = ptr;
    if (!mongoc_shared_ptr_is_null (ptr)) {
       bson_atomic_int_fetch_add (
-         &ret._aux->refcount, 1, bson_memory_order_acquire);
+         (volatile long *)&ret._aux->refcount, 1, bson_memory_order_acquire);
    }
    return ret;
 }
@@ -136,7 +136,7 @@ mongoc_shared_ptr_reset_null (mongoc_shared_ptr *const ptr)
    }
    /* Decrement the reference count by one */
    prevcount = bson_atomic_int_fetch_sub (
-      &ptr->_aux->refcount, 1, bson_memory_order_acq_rel);
+      (volatile long *)&ptr->_aux->refcount, 1, bson_memory_order_acq_rel);
    if (prevcount == 1) {
       /* We just decremented from one to zero, so this is the last instance.
        * Release the managed data. */
@@ -152,6 +152,6 @@ mongoc_shared_ptr_use_count (mongoc_shared_ptr const ptr)
    BSON_ASSERT (
       !mongoc_shared_ptr_is_null (ptr) &&
       "Unbound mongoc_shared_ptr given to mongoc_shared_ptr_use_count");
-   return bson_atomic_int_fetch (&ptr._aux->refcount,
+   return bson_atomic_int_fetch ((volatile long *)&ptr._aux->refcount,
                                  bson_memory_order_relaxed);
 }
diff --git a/src/libmongoc/src/mongoc/mongoc-topology-background-monitoring.c b/src/libmongoc/src/mongoc/mongoc-topology-background-monitoring.c
index 5e2f0948b..a7f477089 100644
--- a/src/libmongoc/src/mongoc/mongoc-topology-background-monitoring.c
+++ b/src/libmongoc/src/mongoc/mongoc-topology-background-monitoring.c
@@ -36,7 +36,7 @@ static BSON_THREAD_FUN (srv_polling_run, topology_void)
    mongoc_topology_t *topology;
 
    topology = topology_void;
-   while (bson_atomic_int_fetch (&topology->scanner_state,
+   while (bson_atomic_int_fetch ((volatile long*)&topology->scanner_state,
                                  bson_memory_order_relaxed) ==
           MONGOC_TOPOLOGY_SCANNER_BG_RUNNING) {
       int64_t now_ms;
@@ -67,7 +67,7 @@ static BSON_THREAD_FUN (srv_polling_run, topology_void)
        * topology srv_polling_mtx for the scan. The topology may have shut
        * down in that time. */
       bson_mutex_lock (&topology->srv_polling_mtx);
-      if (bson_atomic_int_fetch (&topology->scanner_state,
+      if (bson_atomic_int_fetch ((volatile long*)&topology->scanner_state,
                                  bson_memory_order_relaxed) !=
           MONGOC_TOPOLOGY_SCANNER_BG_RUNNING) {
          bson_mutex_unlock (&topology->srv_polling_mtx);
@@ -137,7 +137,7 @@ _mongoc_topology_background_monitoring_start (mongoc_topology_t *topology)
    }
 
    prev_state = bson_atomic_int_compare_exchange_strong (
-      &topology->scanner_state,
+      (volatile long *)&topology->scanner_state,
       MONGOC_TOPOLOGY_SCANNER_OFF,
       MONGOC_TOPOLOGY_SCANNER_BG_RUNNING,
       bson_memory_order_relaxed);
@@ -227,7 +227,7 @@ _mongoc_topology_background_monitoring_reconcile (
 
    BSON_ASSERT (!topology->single_threaded);
 
-   if (bson_atomic_int_fetch (&topology->scanner_state,
+   if (bson_atomic_int_fetch ((volatile long*)&topology->scanner_state,
                               bson_memory_order_relaxed) !=
        MONGOC_TOPOLOGY_SCANNER_BG_RUNNING) {
       return;
@@ -261,7 +261,7 @@ _mongoc_topology_background_monitoring_request_scan (
 
    BSON_ASSERT (!topology->single_threaded);
 
-   if (bson_atomic_int_fetch (&topology->scanner_state,
+   if (bson_atomic_int_fetch ((volatile long*)&topology->scanner_state,
                               bson_memory_order_relaxed) ==
        MONGOC_TOPOLOGY_SCANNER_SHUTTING_DOWN) {
       return;
@@ -295,7 +295,7 @@ _mongoc_topology_background_monitoring_stop (mongoc_topology_t *topology)
 
    BSON_ASSERT (!topology->single_threaded);
 
-   if (bson_atomic_int_fetch (&topology->scanner_state,
+   if (bson_atomic_int_fetch ((volatile long*)&topology->scanner_state,
                               bson_memory_order_relaxed) !=
        MONGOC_TOPOLOGY_SCANNER_BG_RUNNING) {
       return;
@@ -305,7 +305,7 @@ _mongoc_topology_background_monitoring_stop (mongoc_topology_t *topology)
 
    /* Tell the srv polling thread to stop */
    bson_mutex_lock (&topology->srv_polling_mtx);
-   bson_atomic_int_exchange (&topology->scanner_state,
+   bson_atomic_int_exchange ((volatile long *)&topology->scanner_state,
                              MONGOC_TOPOLOGY_SCANNER_SHUTTING_DOWN,
                              bson_memory_order_relaxed);
 
@@ -360,7 +360,7 @@ _mongoc_topology_background_monitoring_stop (mongoc_topology_t *topology)
    mongoc_set_destroy (topology->rtt_monitors);
    topology->server_monitors = mongoc_set_new (1, NULL, NULL);
    topology->rtt_monitors = mongoc_set_new (1, NULL, NULL);
-   bson_atomic_int_exchange (&topology->scanner_state,
+   bson_atomic_int_exchange ((volatile long *)&topology->scanner_state,
                              MONGOC_TOPOLOGY_SCANNER_OFF,
                              bson_memory_order_relaxed);
    mongoc_cond_broadcast (&topology->cond_client);
diff --git a/src/libmongoc/src/mongoc/mongoc-ts-pool.c b/src/libmongoc/src/mongoc/mongoc-ts-pool.c
index 2a8bb5c11..fb34f567f 100644
--- a/src/libmongoc/src/mongoc/mongoc-ts-pool.c
+++ b/src/libmongoc/src/mongoc/mongoc-ts-pool.c
@@ -85,7 +85,7 @@ _new_item (mongoc_ts_pool *pool, bson_error_t *error)
    }
    if (node && AUDIT_POOL_ENABLED) {
       bson_atomic_int32_fetch_add (
-         &pool->outstanding_items, 1, bson_memory_order_relaxed);
+         (volatile long *)&pool->outstanding_items, 1, bson_memory_order_relaxed);
    }
    return node;
 }
@@ -117,10 +117,10 @@ _try_get (mongoc_ts_pool *pool)
    }
    bson_mutex_unlock (&pool->mtx);
    if (node) {
-      bson_atomic_int32_fetch_sub (&pool->size, 1, bson_memory_order_relaxed);
+      bson_atomic_int32_fetch_sub ((volatile long *)&pool->size, 1, bson_memory_order_relaxed);
       if (AUDIT_POOL_ENABLED) {
          bson_atomic_int32_fetch_add (
-            &pool->outstanding_items, 1, bson_memory_order_relaxed);
+            (volatile long *)&pool->outstanding_items, 1, bson_memory_order_relaxed);
       }
    }
    return node;
@@ -220,10 +220,10 @@ mongoc_ts_pool_return (void *item)
       pool->head = node;
       bson_mutex_unlock (&pool->mtx);
       bson_atomic_int32_fetch_add (
-         &node->owner_pool->size, 1, bson_memory_order_relaxed);
+         (volatile long *)&node->owner_pool->size, 1, bson_memory_order_relaxed);
       if (AUDIT_POOL_ENABLED) {
          bson_atomic_int32_fetch_sub (
-            &node->owner_pool->outstanding_items, 1, bson_memory_order_relaxed);
+            (volatile long *)&node->owner_pool->outstanding_items, 1, bson_memory_order_relaxed);
       }
    }
 }
@@ -234,7 +234,7 @@ mongoc_ts_pool_drop (void *item)
    pool_node *node = (void *) ((uint8_t *) (item) -offsetof (pool_node, data));
    if (AUDIT_POOL_ENABLED) {
       bson_atomic_int32_fetch_sub (
-         &node->owner_pool->outstanding_items, 1, bson_memory_order_relaxed);
+         (volatile long *)&node->owner_pool->outstanding_items, 1, bson_memory_order_relaxed);
    }
    _delete_item (node);
 }
@@ -248,7 +248,7 @@ mongoc_ts_pool_is_empty (const mongoc_ts_pool *pool)
 size_t
 mongoc_ts_pool_size (const mongoc_ts_pool *pool)
 {
-   return bson_atomic_int32_fetch (&pool->size, bson_memory_order_relaxed);
+   return bson_atomic_int32_fetch ((volatile long *)&pool->size, bson_memory_order_relaxed);
 }
 
 void
